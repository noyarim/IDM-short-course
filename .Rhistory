state <- c(S_h = 24999, #population of 100,000, 1 person starts of infected
I_h = 1,
R_h = 0,
S_l = 75000,
I_l = 0,
R_l = 0
)
test <- matrix(data=state, nrow=n_groups)
n_groups <- 2
test <- matrix(data=state, nrow=n_groups)
View(test)
test <- matrix(data=state, nrow=n_groups, byrow=T)
View(test)
contact_matrix=matrix(data=c(5, 0.5, 1, 0.5)*0.5,
nrow=2, ncol=2, byrow=T)
contact_matrix
contact_matrix=matrix(data=c(5, 0.5, 1, 0.5)*0.5,
nrow=2, ncol=2, byrow=F)
contact_matrix
contact_matrix=matrix(data=c(5, 0.5, 0.5, 1)*0.5,
nrow=2, ncol=2, byrow=T)
contact_matrix
parameters <- c(n_groups=2,
contact_matrix=matrix(data=c(5, 0.5, 0.5, 1)*0.5, #0.5 is original beta
nrow=2, ncol=2, byrow=T),
gamma = 0.3, #recovery rate (1/duration infection)
)
parameters <- c(contact_matrix=matrix(data=c(5, 0.5, 0.5, 1)*0.5, #0.5 is original beta
nrow=2, ncol=2, byrow=T),
gamma = 0.3 #recovery rate (1/duration infection)
)
state <- c(S_h = 24999, #population of 100,000, 1 person starts of infected
I_h = 1,
R_h = 0,
S_l = 75000,
I_l = 0,
R_l = 0
)
test <- matrix(data=state, nrow=ncol(parameters$contact_matrix), byrow=T)
test <- matrix(data=state, nrow=ncol(parameters[["contact_matrix"]]), byrow=T)
test <- matrix(data=state, nrow=ncol(parameters["contact_matrix"]), byrow=T)
ncol(parameters["contact_matrix"])
parameters <- c(contact_matrix=matrix(data=c(5, 0.5, 0.5, 1)*0.5, #0.5 is original beta
nrow=2, ncol=2, byrow=T),
gamma = 0.3 #recovery rate (1/duration infection)
)
# A vector or list of model parameters (e.g. effective contact rate, recovery rate)
# A vector of initial compartment sizes (often 1 infected person and the rest susceptible)
# A vector of time steps corresponding to how long we want to run the model.
parameters <- list(contact_matrix=matrix(data=c(5, 0.5, 0.5, 1)*0.5, #0.5 is original beta
nrow=2, ncol=2, byrow=T),
gamma = 0.3 #recovery rate (1/duration infection)
)
state <- c(S_h = 24999, #population of 100,000, 1 person starts of infected
I_h = 1,
R_h = 0,
S_l = 75000,
I_l = 0,
R_l = 0
)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
#3. Define function for a basic SIR model without demography
test <- matrix(data=state, nrow=ncol(contact_matrix), byrow=T)
test
state <- matrix(data=state, nrow=ncol(contact_matrix), byrow=T)
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
state
parameters$contact_matrix
as.list(c(state, parameters))
with(as.list(c(parameters, "state"=state)))
as.list(c(parameters, "state"=state))
parameters
parameters[["state"]] <- state
parameters
attach(parameters)
S
state
-1*contact_matrix
state
state$S
state[["S"]]
state["S"]
state[, "S"]
-1*contact_matrix*state[, "S"]*state[,"I"]/rowSums(state)
state[,"S"]
state[, "S"]*t(state[,"I"])
state[,"S"]
state[,"I"]
state[, "S"]*state[,"I"]
state[, "S"]%*%state[,"I"]
state[, "S"]%*%t(state[,"I"])
contact_matrix*state[, "S"]%*%t(state[,"I"])
state[, "S"]%*%t(state[,"I"])
contact_matrix
contact_matrix%*%(state[, "S"]%*%t(state[,"I"]))
contact_matrix*state[, "S"]%*%t(state[,"I"])/
1
contact_matrix
contact_matrix*state[, "S"]%*%t(state[,"I"])
state
2/5*24999
2.5*24999
.25*75000
sum(contact_matrix*state[, "S"]%*%t(state[,"I"]))
contact_matrix*state[,"S"]*state[,"I"]
contact_matrix%*%state[,"S"]*state[,"I"]
contact_matrix%*%(state[,"S"]*state[,"I"])
state[,"S"]*state[,"I"]%*%contact_matrix
state[, "S"]*state[,"I"]%*%contact_matrix
rowSums(state0)
rowSums(state)
state[, "S"]*state[,"I"]%*%contact_matrix/rowSums(state)
62497.5/25000
18750/75000
gamma*state[,"I"]
gamma
state[,"I"]
matrix(1,2)
matrix(data=c(1,2), ncol=0)
matrix(data=c(1,2), ncol=1)
gamma*state[,"S"]
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/rowSums(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/rowSums(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
dS
dI
dR
str(dS)
str(dR)
state
state <- c(S_h = 24999, #population of 100,000, 1 person starts of infected
S_l = 75000,
I_h = 1,
I_l = 0,
R_h = 0,
R_l = 0
)
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
state
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
state
###############################################################################################
#Core/Basic SIR model code
###############################################################################################
#1. Load packages
#if you are installing packages for the first time (only run once):
#install.packages("deSolve")
#install.packages("ggplot2")
#if you've already installed the packages:
library(deSolve) #differential equation solver
library(tidyverse)
#2. Start by defining:
# A vector or list of model parameters (e.g. effective contact rate, recovery rate)
# A vector of initial compartment sizes (often 1 infected person and the rest susceptible)
# A vector of time steps corresponding to how long we want to run the model.
parameters <- list(contact_matrix=matrix(data=c(5, 0.5, 0.5, 1)*0.5, #0.5 is original beta
nrow=2, ncol=2, byrow=T), #WAIFW: beta_hh, beta_lh, beta_hl, beta_ll
gamma = 0.3 #recovery rate (1/duration infection)
)
state <- c(S_h = 24999, #high (h) and low (l) risk groups
S_l = 75000,
I_h = 1,
I_l = 0,
R_h = 0,
R_l = 0
)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
#3. Define function for a basic SIR model without demography
# This will be used with the deSolve package to simulate how your population moves between compartments over time
MixingSIR<-function(t, state, parameters) {
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
with(parameters, {
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/rowSums(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/rowSums(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
#4. Run the SIR model using the ode() function that is part of the deSolve package.
output <- ode(y = state, times = times, func = MixingSIR, parms = parameters)
View(output)
rowSums(output,[,2:ncol(output)])
rowSums(output[,2:ncol(output)])
#5. View and analyze model output
print(head(output)) #I's are rapidly increasing
print(tail(output)) #steady state - state sizes aren't changing
# We define a function that will plot the epidemic curve of our model output from step #4.
output_long <- pivot_longer(as.data.frame(output), cols=2:ncol(output), names_to="state", values_to="size")
View(output_long)
names(output_long)
help(pivot_wider)
output_long <- pivot_wider(output_long, ids_cols="time", names_from="state", names_sep="_")
output_long <- pivot_wider(output_long, ids_cols="time", names_from="state", names_sep="_",
values_from="size")
View(output_long)
# We define a function that will plot the epidemic curve of our model output from step #4.
output_long <- pivot_longer(as.data.frame(output), cols=2:ncol(output), names_to="state", values_to="size")
output_long <- output_long %>% extract(state, into="risk", regex=".*_(.*)")
View(output_long)
help(extract)
output_long <- output_long %>% extract(state, into="risk", regex=".*_(.*)", remove=F)
# We define a function that will plot the epidemic curve of our model output from step #4.
output_long <- pivot_longer(as.data.frame(output), cols=2:ncol(output), names_to="state", values_to="size")
output_long <- output_long %>% extract(state, into="risk", regex=".*_(.*)", remove=F)
View(output_long)
# We define a function that will plot the epidemic curve of our model output from step #4.
output_long <- pivot_longer(as.data.frame(output), cols=2:ncol(output), names_to="state", values_to="size")
output_long <- output_long %>% separate(state, c("state", "risk"), "_")
View(output_long)
fig <- ggplot(out, aes(x=time, y=size, color=state, linestyle=risk)) +
geom_line(size=1.25) +
labs(x='Time', y='Compartment size', color='') +
theme_bw() + theme(panel.grid=element_blank())
plot_trace <-function(out) {
fig <- ggplot(out, aes(x=time, y=size, color=state, linestyle=risk)) +
geom_line(size=1.25) +
labs(x='Time', y='Compartment size', color='') +
theme_bw() + theme(panel.grid=element_blank())
return(fig)
}
plot_trace(output_long)
plot_trace <-function(out) {
fig <- ggplot(out, aes(x=time, y=size, color=state, linetype=risk)) +
geom_line(width=1.25) +
labs(x='Time', y='Compartment size', color='') +
theme_bw() + theme(panel.grid=element_blank())
return(fig)
}
plot_trace(output_long)
plot_trace <-function(out) {
fig <- ggplot(out, aes(x=time, y=size, color=state, linetype=risk)) +
geom_line(linewidth=1.25) +
labs(x='Time', y='Compartment size', color='') +
theme_bw() + theme(panel.grid=element_blank())
return(fig)
}
plot_trace(output_long)
View(output_long)
plot_trace(output_long %>% filter(time<100))
plot_trace <-function(out) {
fig <- ggplot(out, aes(x=time, y=size, color=state, linetype=risk)) +
geom_line(linewidth=1.25) +
labs(x='Time', y='Compartment size', color='', linetype='') +
theme_bw() + theme(panel.grid=element_blank())
return(fig)
}
plot_trace(output_long %>% filter(time<100))
#if you've already installed the packages:
library(deSolve) #differential equation solver
library(tidyverse)
#2. Start by defining:
# A vector or list of model parameters (e.g. effective contact rate, recovery rate)
# A vector of initial compartment sizes (often 1 infected person and the rest susceptible)
# A vector of time steps corresponding to how long we want to run the model.
parameters <- list(contact_matrix=matrix(data=c(5, 0.5, 0.5, 1)*0.5, #0.5 is original beta
nrow=2, ncol=2, byrow=T), #WAIFW: beta_hh, beta_lh, beta_hl, beta_ll
gamma = 0.3 #recovery rate (1/duration infection)
)
state <- c(S_High = 24999, #high (h) and low (l) risk groups
S_Low = 75000,
I_High = 1,
I_Low = 0,
R_High = 0,
R_Low = 0
)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
#3. Define function for a basic SIR model without demography
# This will be used with the deSolve package to simulate how your population moves between compartments over time
MixingSIR<-function(t, state, parameters) {
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
with(parameters, {
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/rowSums(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/rowSums(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
#4. Run the SIR model using the ode() function that is part of the deSolve package.
output <- ode(y = state, times = times, func = MixingSIR, parms = parameters)
View(output)
print(head(output)) #I's are rapidly increasing
print(tail(output)) #steady state - state sizes aren't changing
# We define a function that will plot the epidemic curve of our model output from step #4.
output_long <- pivot_longer(as.data.frame(output), cols=2:ncol(output), names_to="state", values_to="size")
output_long <- output_long %>% separate(state, c("state", "risk"), "_")
plot_trace <-function(out) {
fig <- ggplot(out, aes(x=time, y=size, color=state, linetype=risk)) +
geom_line(linewidth=1.25) +
labs(x='Time', y='Compartment size', color='', linetype='') +
theme_bw() + theme(panel.grid=element_blank())
return(fig)
}
plot_trace(output_long %>% filter(time<100))
