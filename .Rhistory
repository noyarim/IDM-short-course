scale_color_manual(values=c("tomato","blue","green"))+
theme_bw()
# side-by-side plot
ggarrange(g1,g2,common.legend = TRUE)
parameters
###############################################################################################
library(deSolve)
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggpubr)
## B. Vaccination provides imperfect protection from infection ##
# B-1. No change in risk of infecting others
# 1. Define model function
OpenSIR_Vax_ip1<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V
#compartments without vaccination
dS_NotV <- -beta*S_NotV*(I_NotV+I_V)/N + birth*N - death*S_NotV - mu*S_NotV
dI_NotV <- beta*S_NotV*(I_NotV+I_V)/N - death*I_NotV - gamma*I_NotV
dR_NotV <- gamma*I_NotV - death*R_NotV
#compartments with vaccination
dS_V <- -beta*S_V*(I_NotV+I_V)/N*(1-alpha) - death*S_V + mu*S_NotV
dI_V <- beta*S_V*(I_NotV+I_V)/N*(1-alpha) - death*I_V - gamma*I_V
dR_V <- gamma*I_V - death*R_V
#cumulative number of cases
dC <- beta*S_NotV*(I_NotV+I_V)/N + beta*S_V*(I_NotV+I_V)/N*(1-alpha)
# return the rates of change as a list
list(c(dS_NotV,dS_V,dI_NotV,dI_V, dR_NotV,dR_V,dC))
})
}
# 1. Define model function
# B-2. Change in risk of infecting others with vaccination
OpenSIR_Vax_ip2<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V
beta.2 = mbeta*beta.1 # transmission rate given vaccination
#compartments without vaccination
dS_NotV <- -beta.1*S_NotV*I_NotV/N - beta.2*S_NotV*I_V/N + birth*N - death*S_NotV - mu*S_NotV
dI_NotV <- beta.1*S_NotV*I_NotV/N + beta.2*S_NotV*I_V/N - death*I_NotV - gamma*I_NotV
dR_NotV <- gamma*I_NotV - death*R_NotV
#compartments with vaccination
dS_V <- -beta.1*S_V*I_NotV/N*(1-alpha) - beta.2*S_V*I_V/N*(1-alpha) - death*S_V + mu*S_V
dI_V <- beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_V*I_V/N*(1-alpha) - death*I_V - gamma*I_V
dR_V <- gamma*I_V - death*R_V
#cumulative number of cases
dC <- beta.1*S_NotV*I_NotV/N + beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_NotV*I_V/N + beta.2*S_V*I_V/N*(1-alpha)
# return the rates of change as a list
list(c(dS_NotV,dS_V,dI_NotV,dI_V, dR_NotV,dR_V, dC))
})
}
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 1, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# initial state
state.ip <- c(S_NotV = 99999,
S_V = 0,
I_NotV = 1,
I_V = 0,
R_NotV = 0,
R_V = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.vax.ip1 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = parameters)
output.vax.ip2 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = parameters)
# Calculate S, I, and R
output.vax.ip1 <- as.data.frame(output.vax.ip1) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
output.vax.ip2 <- as.data.frame(output.vax.ip2) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
# Plot base-case outcomes
g1<- ggplot(output.vax.ip1)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
theme_bw()
g2<- ggplot(output.vax.ip2)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
theme_bw()
# side-by-side plot
ggarrange(g1,g2,common.legend = TRUE)
g2
parameters
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.2, # transmission rate given no-vaccination
mbeta = 1, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.2, # transmission rate given no-vaccination
mbeta = 1, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# initial state
state.ip <- c(S_NotV = 99999,
S_V = 0,
I_NotV = 1,
I_V = 0,
R_NotV = 0,
R_V = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.vax.ip1 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = parameters)
output.vax.ip2 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = parameters)
# Calculate S, I, and R
output.vax.ip1 <- as.data.frame(output.vax.ip1) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
output.vax.ip2 <- as.data.frame(output.vax.ip2) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
# Plot base-case outcomes
g1<- ggplot(output.vax.ip1)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
theme_bw()
g2<- ggplot(output.vax.ip2)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
theme_bw()
# side-by-side plot
ggarrange(g1,g2,common.legend = TRUE)
5
5
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 1, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# initial state
state.ip <- c(S_NotV = 99999,
S_V = 0,
I_NotV = 1,
I_V = 0,
R_NotV = 0,
R_V = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.vax.ip1 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = parameters)
output.vax.ip2 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = parameters)
# Calculate S, I, and R
output.vax.ip1 <- as.data.frame(output.vax.ip1) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
output.vax.ip2 <- as.data.frame(output.vax.ip2) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
# Plot base-case outcomes
g1<- ggplot(output.vax.ip1)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
theme_bw()
g2<- ggplot(output.vax.ip2)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
theme_bw()
# side-by-side plot
ggarrange(g1,g2,common.legend = TRUE)
# 1-4. SIR model with quarantine
# where a proportion of the infected is under quarantine: I -> Q
OpenSIR_Qrtn<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S + I + Q + R
#SIR with quarantine
dS<- -beta*S*I/N + birth*N - death*S
dI <- beta*S*I/N - death*I - q*I - gamma*I
dQ <- q*I - death*Q - gamma*Q
dR <- gamma*I + gamma*Q - death*R
dC <- beta*S*I/N
# return the rates of change as a list
list(c(dS, dI, dQ, dR, dC))
})
}
# Initial state
state.q <- c(S = 99999, #population of 100,000, 1 person starts of infected
I = 1,
Q = 0,
R = 0,
C = 0)
# side-by-side plot
ggarrange(g1,g2,common.legend = TRUE)
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 0.1, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# initial state
state.ip <- c(S_NotV = 99999,
S_V = 0,
I_NotV = 1,
I_V = 0,
R_NotV = 0,
R_V = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.vax.ip1 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = parameters)
output.vax.ip2 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = parameters)
# Calculate S, I, and R
output.vax.ip1 <- as.data.frame(output.vax.ip1) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
output.vax.ip2 <- as.data.frame(output.vax.ip2) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
# Plot base-case outcomes
g1<- ggplot(output.vax.ip1)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
theme_bw()
g2<- ggplot(output.vax.ip2)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
theme_bw()
# side-by-side plot
ggarrange(g1,g2,common.legend = TRUE)
a.1<-2
a.1
a.1*2
# 1. Define model function
# B-2. Change in risk of infecting others with vaccination
OpenSIR_Vax_ip2<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V
beta.2 = mbeta*beta.1 # transmission rate given vaccination
print(beta.2)
#compartments without vaccination
dS_NotV <- -beta.1*S_NotV*I_NotV/N - beta.2*S_NotV*I_V/N + birth*N - death*S_NotV - mu*S_NotV
dI_NotV <- beta.1*S_NotV*I_NotV/N + beta.2*S_NotV*I_V/N - death*I_NotV - gamma*I_NotV
dR_NotV <- gamma*I_NotV - death*R_NotV
#compartments with vaccination
dS_V <- -beta.1*S_V*I_NotV/N*(1-alpha) - beta.2*S_V*I_V/N*(1-alpha) - death*S_V + mu*S_V
dI_V <- beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_V*I_V/N*(1-alpha) - death*I_V - gamma*I_V
dR_V <- gamma*I_V - death*R_V
#cumulative number of cases
dC <- beta.1*S_NotV*I_NotV/N + beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_NotV*I_V/N + beta.2*S_V*I_V/N*(1-alpha)
# return the rates of change as a list
list(c(dS_NotV,dS_V,dI_NotV,dI_V, dR_NotV,dR_V, dC))
})
}
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 1, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# initial state
state.ip <- c(S_NotV = 99999,
S_V = 0,
I_NotV = 1,
I_V = 0,
R_NotV = 0,
R_V = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.vax.ip1 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = parameters)
output.vax.ip2 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = parameters)
print(beta1,beta.2)
# 1. Define model function
# B-2. Change in risk of infecting others with vaccination
OpenSIR_Vax_ip2<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V
beta.2 = mbeta*beta.1 # transmission rate given vaccination
print(beta1,beta.2)
#compartments without vaccination
dS_NotV <- -beta.1*S_NotV*I_NotV/N - beta.2*S_NotV*I_V/N + birth*N - death*S_NotV - mu*S_NotV
dI_NotV <- beta.1*S_NotV*I_NotV/N + beta.2*S_NotV*I_V/N - death*I_NotV - gamma*I_NotV
dR_NotV <- gamma*I_NotV - death*R_NotV
#compartments with vaccination
dS_V <- -beta.1*S_V*I_NotV/N*(1-alpha) - beta.2*S_V*I_V/N*(1-alpha) - death*S_V + mu*S_V
dI_V <- beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_V*I_V/N*(1-alpha) - death*I_V - gamma*I_V
dR_V <- gamma*I_V - death*R_V
#cumulative number of cases
dC <- beta.1*S_NotV*I_NotV/N + beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_NotV*I_V/N + beta.2*S_V*I_V/N*(1-alpha)
# return the rates of change as a list
list(c(dS_NotV,dS_V,dI_NotV,dI_V, dR_NotV,dR_V, dC))
})
}
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 1, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# initial state
state.ip <- c(S_NotV = 99999,
S_V = 0,
I_NotV = 1,
I_V = 0,
R_NotV = 0,
R_V = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.vax.ip1 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = parameters)
output.vax.ip2 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = parameters)
# Calculate S, I, and R
output.vax.ip1 <- as.data.frame(output.vax.ip1) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
print(beta.1,beta.2)
#compartments without vaccination
dS_NotV <- -beta.1*S_NotV*I_NotV/N - beta.2*S_NotV*I_V/N + birth*N - death*S_NotV - mu*S_NotV
with(as.list(c(state, parameters)),{
N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V
beta.2 = mbeta*beta.1 # transmission rate given vaccination
print(beta.1,beta.2)
#compartments without vaccination
dS_NotV <- -beta.1*S_NotV*I_NotV/N - beta.2*S_NotV*I_V/N + birth*N - death*S_NotV - mu*S_NotV
dI_NotV <- beta.1*S_NotV*I_NotV/N + beta.2*S_NotV*I_V/N - death*I_NotV - gamma*I_NotV
dR_NotV <- gamma*I_NotV - death*R_NotV
#compartments with vaccination
dS_V <- -beta.1*S_V*I_NotV/N*(1-alpha) - beta.2*S_V*I_V/N*(1-alpha) - death*S_V + mu*S_V
dI_V <- beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_V*I_V/N*(1-alpha) - death*I_V - gamma*I_V
dR_V <- gamma*I_V - death*R_V
#cumulative number of cases
dC <- beta.1*S_NotV*I_NotV/N + beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_NotV*I_V/N + beta.2*S_V*I_V/N*(1-alpha)
# return the rates of change as a list
list(c(dS_NotV,dS_V,dI_NotV,dI_V, dR_NotV,dR_V, dC))
})
# 1. Define model function
# B-2. Change in risk of infecting others with vaccination
OpenSIR_Vax_ip2<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V
beta.2 = mbeta*beta.1 # transmission rate given vaccination
print(beta.1,beta.2)
#compartments without vaccination
dS_NotV <- -beta.1*S_NotV*I_NotV/N - beta.2*S_NotV*I_V/N + birth*N - death*S_NotV - mu*S_NotV
dI_NotV <- beta.1*S_NotV*I_NotV/N + beta.2*S_NotV*I_V/N - death*I_NotV - gamma*I_NotV
dR_NotV <- gamma*I_NotV - death*R_NotV
#compartments with vaccination
dS_V <- -beta.1*S_V*I_NotV/N*(1-alpha) - beta.2*S_V*I_V/N*(1-alpha) - death*S_V + mu*S_V
dI_V <- beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_V*I_V/N*(1-alpha) - death*I_V - gamma*I_V
dR_V <- gamma*I_V - death*R_V
#cumulative number of cases
dC <- beta.1*S_NotV*I_NotV/N + beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_NotV*I_V/N + beta.2*S_V*I_V/N*(1-alpha)
# return the rates of change as a list
list(c(dS_NotV,dS_V,dI_NotV,dI_V, dR_NotV,dR_V, dC))
})
}
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 1, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# initial state
state.ip <- c(S_NotV = 99999,
S_V = 0,
I_NotV = 1,
I_V = 0,
R_NotV = 0,
R_V = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.vax.ip1 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = parameters)
output.vax.ip2 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = parameters)
# Calculate S, I, and R
output.vax.ip1 <- as.data.frame(output.vax.ip1) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
print(c(beta.1,beta.2))
#compartments without vaccination
dS_NotV <- -beta.1*S_NotV*I_NotV/N - beta.2*S_NotV*I_V/N + birth*N - death*S_NotV - mu*S_NotV
# 1. Define model function
# B-2. Change in risk of infecting others with vaccination
OpenSIR_Vax_ip2<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V
beta.2 = mbeta*beta.1 # transmission rate given vaccination
print(c(beta.1,beta.2))
#compartments without vaccination
dS_NotV <- -beta.1*S_NotV*I_NotV/N - beta.2*S_NotV*I_V/N + birth*N - death*S_NotV - mu*S_NotV
dI_NotV <- beta.1*S_NotV*I_NotV/N + beta.2*S_NotV*I_V/N - death*I_NotV - gamma*I_NotV
dR_NotV <- gamma*I_NotV - death*R_NotV
#compartments with vaccination
dS_V <- -beta.1*S_V*I_NotV/N*(1-alpha) - beta.2*S_V*I_V/N*(1-alpha) - death*S_V + mu*S_V
dI_V <- beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_V*I_V/N*(1-alpha) - death*I_V - gamma*I_V
dR_V <- gamma*I_V - death*R_V
#cumulative number of cases
dC <- beta.1*S_NotV*I_NotV/N + beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_NotV*I_V/N + beta.2*S_V*I_V/N*(1-alpha)
# return the rates of change as a list
list(c(dS_NotV,dS_V,dI_NotV,dI_V, dR_NotV,dR_V, dC))
})
}
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 1, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# initial state
state.ip <- c(S_NotV = 99999,
S_V = 0,
I_NotV = 1,
I_V = 0,
R_NotV = 0,
R_V = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.vax.ip1 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = parameters)
output.vax.ip2 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = parameters)
# Calculate S, I, and R
output.vax.ip1 <- as.data.frame(output.vax.ip1) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
