# Stack the ode result
twsa_dt <- rbind(twsa_dt, this_output)
}
}
# Change the label for omega and beta
omega_lb <- sapply(omega_list,function(x) paste0("omega=",x))
omega_lb
twsa_dt$omega <- factor(twsa_dt$omega, labels = omega_lb)
beta_lb <- sapply(beta_list,function(x) paste0("beta=",x))
beta_lb
twsa_dt$beta <- factor(twsa_dt$beta, labels = beta_lb)
# Check if label is created correctly
head(twsa_dt)
# Plot the two-way sensitivity analysis result
ggplot(twsa_dt)+
geom_line(aes(x=time, y=I))+
facet_grid(beta~omega)+
ylab("Infected")+
xlab("Time")+
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
library(ggplot2)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
library(ggplot2)
library(reshape2)
#1. Define model function
OpenSEIR<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S + E + I + R
sigma = 1/t_lat # 1/latent period
#SIR w/ demography equations from lecture
dS <- -beta*S*I/N + birth*N - death*S + omega*R
dE <- beta*S*I/N - sigma*E - death*E
dI <- sigma*E - death*I - gamma*I
dR <- gamma*I - death*R - omega*R
# return the rates of change as a list
list(c(dS, dE, dI, dR))
})
}
#2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
t_lat = 3 # latent period from E
)
state <- c(S = 99999, #population of 100,000, 1 person starts of infected
E = 0,
I = 1,
R = 0
)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
#Run the base-case
out_seir_demo <- data.frame(ode(y = state, times = times, func = OpenSEIR, parms = parameters))
#Plot the result of base-case
ggplot(data=as.data.frame(out_seir_demo))+
geom_point(aes(time,I))+
ylab("Infected")+
theme_bw()
ggplot(output_dt)+
geom_line(aes(x=time, y=I, color=t_lat, group=t_lat))+
ylab("Infected")+
xlab("Time")+
theme_bw()
#One-way sensitivity analysis on the latent period (SEIR_demo)
tlat_list <- c(0.01,seq(1,5,by=1)) # a vector of latent period
output_dt <- data.frame() # an empty dataset to save outcomes
for (this_tlat in tlat_list){
# Replace latent period with the next value in the last
parameters['t_lat'] = this_tlat
# Run ode solver
this_output <- data.frame(ode(y = state, times=times, func=OpenSEIR, parms = parameters))
# Record current value of t_lat
this_output$t_lat = as.character(this_tlat)
# Stack the result
output_dt <- rbind(output_dt, this_output)
}
ggplot(output_dt)+
geom_line(aes(x=time, y=I, color=t_lat, group=t_lat))+
ylab("Infected")+
xlab("Time")+
theme_bw()
# Continuous sensitivity analysis showing the change in the epidemic peak
# A function to find the epidemic peak given a time frame
find_peak <- function(output){
infected <- output$I # output$E + output$I if you want to include exposed compartment
peak <- which.max(infected)
return(peak)
}
tlat_list <- seq(0.03,10,by=0.1) # a vector of t_lat
output_dt <- data.frame() # An empty dataset to save ode outcomes
for (this_tlat in tlat_list){
# Replace t_lat with the next value
parameters['t_lat'] = this_tlat
# Run ode solver
this_output <- data.frame(ode(y = state, times=times, func=OpenSEIR, parms = parameters))
# Find the epidemic peak
this_peak <- find_peak(this_output)
# Create a dataset with peak and t_lat in this cycle
this_output <- data.frame(peak=this_peak, tlat=this_tlat)
# Stack the dataset
output_dt <- rbind(output_dt, this_output)
}
ggplot(output_dt)+
geom_point(aes(x=tlat, y=peak))+
ylab("Epi peak")+
xlab("Latent period")+
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggpubr)
## A. Vaccination provides perfect protection from infection: S -> R ##
OpenSIR_Vax_pp<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S + I + R
#SIR w/ demography equations from lecture
dS <- -beta*S*I/N + birth*N - death*S - mu*S
dI <- beta*S*I/N - death*I - gamma*I
dR <- gamma*I + mu*S - death*R
# cumulative incidence
dC <- beta*S*I/N
# return the rates of change as a list
list(c(dS, dI, dR, dC))
})
}
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 0.5, # this should be lower than 1
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# Initial state distribution
state.pp <- c(S = 99999, #population of 100,000, 1 person starts of infected
I = 1,
R = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run the base-case
output.vax.pp <- ode(y = state.pp, times = times, func = OpenSIR_Vax_pp, parms = parameters)
# Plot the basecase result
plot(output.vax.pp)
# Copy parameters
temp_param <- parameters
# Set vaccination rate = 0
temp_param['mu'] = 0
# Run ode solver and save the outcome in temperary output variable
temp_output <-  ode(y = state.pp, times = times, func = OpenSIR_Vax_pp, parms = temp_param)
# Create a dataset to compare no_vax and vax output
I_dt <- data.frame(time = temp_output[,'time'],no_vax = temp_output[,'I'], vax = output.vax.pp[,'I'])
# Plot the dataset
ggplot(I_dt)+
geom_line(aes(time,vax,color='vax'))+
geom_line(aes(time,no_vax,color='No vax'))+
theme_bw()+
scale_color_manual(values=c("blue","tomato"))
## B. Vaccination provides imperfect protection from infection ##
# B-1. No change in infectiousness
# 1. Define model function
OpenSIR_Vax_ip1<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V
#compartments without vaccination
dS_NotV <- -beta*S_NotV*(I_NotV+I_V)/N + birth*N - death*S_NotV - mu*S_NotV
dI_NotV <- beta*S_NotV*(I_NotV+I_V)/N - death*I_NotV - gamma*I_NotV
dR_NotV <- gamma*I_NotV - death*R_NotV
#compartments with vaccination
dS_V <- -beta*S_V*(I_NotV+I_V)/N*(1-alpha) - death*S_V + mu*S_NotV
dI_V <- beta*S_V*(I_NotV+I_V)/N*(1-alpha) - death*I_V - gamma*I_V
dR_V <- gamma*I_V - death*R_V
#cumulative number of cases
dC <- beta*S_NotV*(I_NotV+I_V)/N + beta*S_V*(I_NotV+I_V)/N*(1-alpha)
# return the rates of change as a list
list(c(dS_NotV,dS_V,dI_NotV,dI_V, dR_NotV,dR_V,dC))
})
}
# 1. Define model function
# B-2. Change in risk of infecting others with vaccination
OpenSIR_Vax_ip2<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V
beta.2 = mbeta*beta.1 # transmission rate given vaccination
#compartments without vaccination
dS_NotV <- -beta.1*S_NotV*I_NotV/N - beta.2*S_NotV*I_V/N + birth*N - death*S_NotV - mu*S_NotV
dI_NotV <- beta.1*S_NotV*I_NotV/N + beta.2*S_NotV*I_V/N - death*I_NotV - gamma*I_NotV
dR_NotV <- gamma*I_NotV - death*R_NotV
#compartments with vaccination
dS_V <- -beta.1*S_V*I_NotV/N*(1-alpha) - beta.2*S_V*I_V/N*(1-alpha) - death*S_V + mu*S_NotV
dI_V <- beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_V*I_V/N*(1-alpha) - death*I_V - gamma*I_V
dR_V <- gamma*I_V - death*R_V
#cumulative number of cases
dC <- beta.1*S_NotV*I_NotV/N + beta.1*S_V*I_NotV/N*(1-alpha) + beta.2*S_NotV*I_V/N + beta.2*S_V*I_V/N*(1-alpha)
# return the rates of change as a list
list(c(dS_NotV,dS_V,dI_NotV,dI_V, dR_NotV,dR_V, dC))
})
}
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 0.5, # 1 if no change in infectiousness with vaccination,
# less than 1 if reduced infectiousness with vaccination
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# initial state
state.ip <- c(S_NotV = 99999,
S_V = 0,
I_NotV = 1,
I_V = 0,
R_NotV = 0,
R_V = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.vax.ip1 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = parameters)
output.vax.ip2 <- ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = parameters)
# Calculate S, I, and R
output.vax.ip1 <- as.data.frame(output.vax.ip1) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
output.vax.ip2 <- as.data.frame(output.vax.ip2) %>%
mutate(S = S_V + S_NotV,
I = I_V + I_NotV,
R = R_V + R_NotV)
# Plot base-case outcomes
g1<- ggplot(output.vax.ip1)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
ggtitle("No Change in Infectiousness")+
ylab("Number of individuals")+
theme_bw()
g2<- ggplot(output.vax.ip2)+
geom_line(aes(time,S,color="S"))+
geom_line(aes(time,I,color="I"))+
geom_line(aes(time,R,color="R"))+
scale_color_manual(values=c("tomato","blue","green"))+
ggtitle("Reduced infectiousness with vaccination")+
ylab("Number of individuals")+
theme_bw()
# side-by-side plot
ggarrange(g1,g2,common.legend = TRUE)
# 1. Vaccination rate (on OpenSIR_Vax_ip1)
mu_list <- seq(0,0.1,length.out=3) # a vector of vaccination rate
mu_out_all <- data.frame() # an empty dataset to save outputs
for(this_mu in mu_list){
temp_param <- parameters # copy parameters
temp_param[['mu']] <- this_mu # replace mu
this_out <- data.frame(ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = temp_param)) # run ode solver
# compute S, I, R and save mu in this cycle
this_out <- this_out %>%
mutate(N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V,
mu = this_mu,
S = S_NotV + S_V,#total susceptible
I = I_NotV + I_V, # total infected
R = R_NotV + R_V) # total recovered
# stack the result
if(this_mu == mu_list[1]){
mu_out_all <- this_out
}else{
mu_out_all <- rbind(mu_out_all, this_out)
}
}
# Change the output data to long-form data
mu_out_all_t <- melt(mu_out_all %>% select(time,S,I,R,N,mu), id.vars=c("time","mu","N"))
# Plot S, I, R
ggplot(mu_out_all_t) +
geom_line(aes(x=time,y=value/N*100,color=variable))+
ylab("Percentage of population")+
facet_wrap(.~mu)+
theme_bw()
# Plot I stratified by vaccination status
ggplot(mu_out_all)+
geom_point(aes(x=time,y=I_NotV,color='Not vaccinated'))+
geom_point(aes(x=time,y=I_V,color='Vaccinated'))+
ylab("Infections")+
facet_wrap(.~mu)+
scale_color_manual(values=c("green","tomato"))+
theme_bw()
# Plot prevalence of I (I/N)
ggplot(mu_out_all) +
geom_point(aes(x=time,y=I/N))+
facet_wrap(.~mu)+
ylab("Proportion of population who are infected")+
theme_bw()
# Cumulative number of infections
ggplot(mu_out_all) +
geom_point(aes(x=time,y=C))+
facet_wrap(.~mu)+
ylab("Cumulative infections")+
theme_bw()
# 2. Vaccine effectiveness
alpha_list <- seq(0,0.3,length.out=3) # a vector of vaccine effectiveness
alpha_out_all <- data.frame() # an empty dataset to save outputs
for(this_alpha in alpha_list){
temp_param <- parameters # copy parameters
temp_param[['alpha']] <- this_alpha # replace alpha
this_out <- data.frame(ode(y = state.ip, times = times, func = OpenSIR_Vax_ip1, parms = temp_param)) # run ode solver
# compute S, I, R and save mu in this cycle
this_out <- this_out %>%
mutate(N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V,
alpha = this_alpha,
S = S_NotV + S_V,
I = I_NotV + I_V,
R = R_NotV + R_V)
# Stack the result
if(this_alpha == alpha_list[1]){
alpha_out_all <- this_out
}else{
alpha_out_all <- rbind(alpha_out_all, this_out)
}
}
# Change the outcome data to long-form data
alpha_out_all_t <- melt(alpha_out_all%>% select(time,S,I,R,N,alpha), id.vars=c("time","alpha","N"))
# Plot S, I, R
ggplot(alpha_out_all_t) +
geom_line(aes(x=time,y=value/N*100,color=variable))+
ylab("Percentage of population")+
facet_wrap(.~alpha)+
theme_bw()
# Plot S, I, R stratified by vaccination status
ggplot(alpha_out_all)+
geom_point(aes(x=time,y=I_NotV,color='Not vaccinated'))+
geom_point(aes(x=time,y=I_V,color='Vaccinated'))+
ylab("Infections")+
facet_wrap(.~alpha)+
scale_color_manual(values=c("green","tomato"))+
theme_bw()
# Plot prevalence of I
ggplot(alpha_out_all) +
geom_point(aes(x=time,y=I/N))+
facet_wrap(.~alpha)+
ylab("Prevalence of infection")+
theme_bw()
# Plot cumulative number of infections
ggplot(alpha_out_all) +
geom_point(aes(x=time,y=C))+
facet_wrap(.~alpha)+
ylab("Cumulative infections")+
theme_bw()
# Breakthrough infection
ggplot(alpha_out_all)+
geom_point(aes(x=time,y=I_V))+
facet_wrap(.~alpha)+
ylab("Number of breakthrough infections")+
theme_bw()
# 3. Ratio of effective contact rate among infected individuals with and without vaccination
mbeta_list <- seq(1,0.7,length.out=3) # a vector of mbeta
mbeta_out_all <- data.frame() # an empty dataset to save outputs
for(this_mbeta in mbeta_list){
temp_param <- parameters # copy parameters
temp_param[['mbeta']] <- this_mbeta # replace mbeta
this_out <- data.frame(ode(y = state.ip, times = times, func = OpenSIR_Vax_ip2, parms = temp_param)) # run ode solver
# compute S,I,R and save mbeta in this cycle
this_out <- this_out %>%
mutate(N = S_NotV + S_V + I_NotV + I_V + R_NotV + R_V,
mbeta = this_mbeta,
S = S_NotV + S_V,
I = I_NotV + I_V,
R = R_NotV + R_V)
# Stack the result
if(this_mbeta == mbeta_list[1]){
mbeta_out_all <- this_out
}else{
mbeta_out_all <- rbind(mbeta_out_all, this_out)
}
}
# change the data to long-form data
mbeta_out_all_t <- melt(mbeta_out_all%>% select(time,S,I,R,N,mbeta), id.vars=c("time","mbeta","N"))
# Plot S,I,R
ggplot(mbeta_out_all_t) +
geom_line(aes(x=time,y=value/N*100,color=variable))+
facet_wrap(.~mbeta)+
ylab("Proportion of population")+
theme_bw()
# plot cumulative number of infections
ggplot(mbeta_out_all) +
geom_point(aes(x=time,y=C))+
facet_wrap(.~mbeta)+
ylab("Cumulative infections")+
theme_bw()
# C. SIR model with quarantine
OpenSIR_Qrtn<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S + I + Q + R
#SIR with quarantine
dS<- -beta*S*I/N + birth*N - death*S
dI <- beta*S*I/N - death*I - q*I - gamma*I
dQ <- q*I - death*Q - gamma*Q
dR <- gamma*I + gamma*Q - death*R
dC <- beta*S*I/N
# return the rates of change as a list
list(c(dS, dI, dQ, dR, dC))
})
}
# 2. Define parameters and starting compartment sizes
parameters <- c(beta = 0.5, #effective contact rate (aka transmission rate)
beta.1 = 0.5, # transmission rate given no-vaccination
mbeta = 0.5, # 1 if no change in infectiousness with vaccination,
# less than 1 if reduced infectiousness with vaccination
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.03, #birth rate (per capita)
death = 0.03, #all-cause mortality rate
omega = 0, # waning immunity
mu = 0.01, # vaccination rate
alpha = 0.3, # vaccine effectiveness
q = 0.02 # quarantine rate
)
# Initial state
state.q <- c(S = 99999, #population of 100,000, 1 person starts of infected
I = 1,
Q = 0,
R = 0,
C = 0)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
# Run ODE solver
output.qrtn <- ode(y = state.q, times = times, func = OpenSIR_Qrtn, parms = parameters)
# Plot base-case result
output.qrtn.t <- melt(as.data.frame(output.qrtn) %>% select(-C), id.vars="time")
ggplot(output.qrtn.t)+
geom_line(aes(time,value,color=variable))+
ylab("Number of individuals")+
theme_bw()
# 4. Quarantine rate
q_list <- c(0,0.02,0.05) # a vector of quarantine rate
q_out_all <- data.frame() # an empty dataset to save the outcome
for(this_q in q_list){
temp_param <- parameters #copy parameter
temp_param[['q']] <- this_q # replace q
# run ode solver
this_out <- data.frame(ode(y = state.q, times = times, func = OpenSIR_Qrtn, parms = temp_param))
# save q value in this cycle
this_out <- this_out %>%
mutate(N = S+I+R+Q,
q = this_q)
# stack the result
if(this_q == q_list[1]){
q_out_all <- this_out
}else{
q_out_all <- rbind(q_out_all, this_out)
}
}
# change the dataset to a long-form dataset
q_out_all_t <- melt(q_out_all%>% select(time,S,I,R,N,q), id.vars=c("time","q","N"))
# Plot S, I, R
ggplot(q_out_all_t) +
geom_line(aes(x=time,y=value/N*100,color=variable))+
ylab("Proportion of population")+
facet_wrap(.~q)+
theme_bw()
# Plot cumulative number of infections
ggplot(q_out_all) +
geom_point(aes(x=time,y=C))+
facet_wrap(.~q)+
ylab("Cumulative infections")+
theme_bw()
# 4. Quarantine rate
q_list <- c(0,0.05,0.1) # a vector of quarantine rate
q_out_all <- data.frame() # an empty dataset to save the outcome
for(this_q in q_list){
temp_param <- parameters #copy parameter
temp_param[['q']] <- this_q # replace q
# run ode solver
this_out <- data.frame(ode(y = state.q, times = times, func = OpenSIR_Qrtn, parms = temp_param))
# save q value in this cycle
this_out <- this_out %>%
mutate(N = S+I+R+Q,
q = this_q)
# stack the result
if(this_q == q_list[1]){
q_out_all <- this_out
}else{
q_out_all <- rbind(q_out_all, this_out)
}
}
# change the dataset to a long-form dataset
q_out_all_t <- melt(q_out_all%>% select(time,S,I,R,N,q), id.vars=c("time","q","N"))
# Plot S, I, R
ggplot(q_out_all_t) +
geom_line(aes(x=time,y=value/N*100,color=variable))+
ylab("Proportion of population")+
facet_wrap(.~q)+
theme_bw()
# Plot cumulative number of infections
ggplot(q_out_all) +
geom_point(aes(x=time,y=C))+
facet_wrap(.~q)+
ylab("Cumulative infections")+
theme_bw()
