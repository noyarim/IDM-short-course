fig2 <- ggplot(output %>% filter(time<=200)) +
geom_line(aes(x=time, y=Rt)) +
geom_hline(yintercept=1, linetype="dashed", color="red") +
labs(x="Time", y="R(t)") +
theme_bw() + theme(panel.grid=element_blank())
fig <- plot_grid(fig1, fig2, nrow=2)
fig
output_all <- list()
for(betas in c(0.2, 0.5, 1)) {
for(gammas in c(0.1, 0.3, 0.5)) {
parameters <- c("beta"=betas,
"gamma"=gammas)
output <- ode(y = state, times = times, func = BasicSIR, parms = parameters)
output_long <- pivot_longer(as.data.frame(output) %>% mutate(N=S+I+R),
cols=c("S","I","R"), names_to="state", values_to="size")
output_all <- c(output_all, list(output_long %>% mutate(beta=paste0("Beta: ", betas),
gamma=paste0("Gamma: ", gammas),
R0=paste0("R0: ", round(betas/gammas, 2)))))
}
}
output_all <- bind_rows(output_all)
output_all <- output_all %>% mutate(label=paste(beta, gamma, R0, sep="; "))
plot_trace(output_all) + facet_wrap(~label)
knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
library(tidyverse)
plot_trace <-function(out) {
fig <- ggplot(out, aes(x=time, y=size/N, color=state)) +
geom_line(linewidth=1.25) +
labs(x='Time', y='Compartment size', color='') +
theme_bw() + theme(panel.grid=element_blank())
return(fig)
}
OpenSIR<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S + I + R
#SIR w/ demography equations from the slides
dS <- -beta*S*I/N + birth*N - death*S
dI <- beta*S*I/N - death*I - gamma*I
dR <- gamma*I - death*R
# return the rates of change as a list
list(c(dS, dI, dR))
})
}
parameters <- list(beta = 0.5, #effective contact rate
gamma = 0.3, #recovery rate (1/duration infection)
birth = 0.02, #birth rate (per capita)
death = 0.02 #all-cause mortality rate
)
state <- c(S = 99999, #population of 100,000, 1 person starts of infected
I = 1,
R = 0
)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>% mutate(N=S+I+R)
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
plot_trace(output_long)
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>% mutate(N=S+I+R)
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
plot_trace(output_long)
tail(output_long, 1)
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>% mutate(N=S+I+R)
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
plot_trace(output_long)
tail(output, 1)
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>% mutate(N=S+I+R)
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
plot_trace(output_long)
output[501, c("S", "I", "R")]/10000
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>% mutate(N=S+I+R)
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
plot_trace(output_long)
output[501, c("S", "I", "R")]/100000
R0 <- parameters[["beta"]]/(parameters[["gamma"]] + parameters[["death"]])
print(paste0("R0: ", R0))
# if R0 <= 1, there is no endemic equilibrium
# if R0 > 1, this is the endemic equilibrium:
S_star <- 1/R0
I_star <- (parameters[["death"]]/parameters[["beta"]])*(R0-1)
R_star <- 1-(S_star + I_star)
#see how this matches the proportions in the graph/from the model
print(paste0("Estimated prevalence at equilibrium: ", round(100*output$I[[T_end+1]]/output$N[[T_end+1]], 2), "%"))
print("Simulated prevalences at equilibrium:")
print(c("S_star"=S_star*100, "I_star"=I_star*100, "R_star"=R_star*100)) #prevalences at equilibrium
output <- output %>% mutate(Rt=R0*S/N)
#changes in Rt correlate w/ the oscillatory pattern in the trace graph
#changes in Rt are fueled by rises and falls in the susceptible population (from births and new infections, respectively)
plot_trace(output_long) +
geom_line(data=output, aes(x=time, y=Rt), color="black") +
geom_hline(yintercept=1, linetype="dashed", color="red")
knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
library(tidyverse)
plot_trace <-function(out) {
fig <- ggplot(out, aes(x=time, y=size/N, color=state)) +
geom_line(linewidth=1.25) +
labs(x='Time', y='Compartment proportions', color='') +
theme_bw() + theme(panel.grid=element_blank())
return(fig)
}
OpenSIR<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S + I + R
#SIR w/ demography equations from the slides
dS <- -beta*S*I/N + birth*N - death*S
dI <- beta*S*I/N - death*I - gamma*I
dR <- gamma*I - death*R
# return the rates of change as a list
list(c(dS, dI, dR))
})
}
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>% mutate(N=S+I+R)
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
plot_trace(output_long)
output[501, c("S", "I", "R")]/100000
R0 <- parameters[["beta"]]/(parameters[["gamma"]] + parameters[["death"]])
print(paste0("R0: ", R0))
# if R0 <= 1, there is no endemic equilibrium
# if R0 > 1, this is the endemic equilibrium:
S_star <- 1/R0
I_star <- (parameters[["death"]]/parameters[["beta"]])*(R0-1)
R_star <- 1-(S_star + I_star)
#see how this matches the proportions in the graph/from the model
print(paste0("Estimated prevalence at equilibrium: ", round(100*output$I[[T_end+1]]/output$N[[T_end+1]], 2), "%"))
print("Simulated prevalences at equilibrium:")
print(c("S_star"=S_star*100, "I_star"=I_star*100, "R_star"=R_star*100)) #prevalences at equilibrium
output <- output %>% mutate(Rt=R0*S/N)
#changes in Rt correlate w/ the oscillatory pattern in the trace graph
#changes in Rt are fueled by rises and falls in the susceptible population (from births and new infections, respectively)
plot_trace(output_long) +
geom_line(data=output, aes(x=time, y=Rt), color="black") +
geom_hline(yintercept=1, linetype="dashed", color="red")
output_all <- list()
for(rates in c(0, 0.01, 0.03, 0.1)) {
parameters[["birth"]] <- parameters[["death"]] <- rates
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>%
mutate(N=S+I+R,
demo_rate=rates,
R0=parameters[["beta"]]/(parameters[["gamma"]] + rates),
Rt=R0*S/N,
demo_lab=paste0("Birth/death rate: ", demo_rate),
R0_lab=paste0("R0: ", round(R0, 2)),
I_star_lab=paste0("Prevalence at t=500: ", round(100*I[time==500]/N[time==500], 1)))
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
output_all <- c(output_all, list(output_long))
}
output_all <- bind_rows(output_all)
plot_trace(output_all) + facet_wrap(~demo_lab+R0_lab+I_star_lab)
output_all <- list()
for(rates in c(0, 0.01, 0.03, 0.1)) {
parameters[["birth"]] <- parameters[["death"]] <- rates
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>%
mutate(N=S+I+R,
demo_rate=rates,
R0=parameters[["beta"]]/(parameters[["gamma"]] + rates),
Rt=R0*S/N,
demo_lab=paste0("Birth/death rate: ", demo_rate),
R0_lab=paste0("R0: ", round(R0, 2)),
I_star_lab=paste0("Prevalence at t=500: ", round(100*I[time==500]/N[time==500], 1)))
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
output_all <- c(output_all, list(output_long))
}
output_all <- bind_rows(output_all)
plot_trace(output_all) + facet_grid(~demo_lab+I_star_lab~R0_lab)
output_all <- list()
for(rates in c(0, 0.01, 0.03, 0.1)) {
parameters[["birth"]] <- parameters[["death"]] <- rates
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>%
mutate(N=S+I+R,
demo_rate=rates,
R0=parameters[["beta"]]/(parameters[["gamma"]] + rates),
Rt=R0*S/N,
demo_lab=paste0("Birth/death rate: ", demo_rate),
R0_lab=paste0("R0: ", round(R0, 2)),
I_star_lab=paste0("Prevalence at t=500: ", round(100*I[time==500]/N[time==500], 1)))
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
output_all <- c(output_all, list(output_long))
}
output_all <- bind_rows(output_all)
plot_trace(output_all) + facet_grid(~demo_lab+R0_lab+I_star_lab)
output_all <- list()
for(rates in c(0, 0.01, 0.03, 0.1)) {
parameters[["birth"]] <- parameters[["death"]] <- rates
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>%
mutate(N=S+I+R,
demo_rate=rates,
R0=parameters[["beta"]]/(parameters[["gamma"]] + rates),
Rt=R0*S/N,
demo_lab=paste0("Birth/death rate: ", demo_rate),
R0_lab=paste0("R0: ", round(R0, 2)),
I_star_lab=paste0("Prevalence at t=500: ", round(100*I[time==500]/N[time==500], 1)))
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
output_all <- c(output_all, list(output_long))
}
output_all <- bind_rows(output_all)
plot_trace(output_all) + facet_wrap(~demo_lab+R0_lab+I_star_lab)
output_all <- list()
for(rates in c(0, 0.01, 0.03, 0.1)) {
parameters[["birth"]] <- parameters[["death"]] <- rates
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>%
mutate(N=S+I+R,
demo_rate=rates,
R0=parameters[["beta"]]/(parameters[["gamma"]] + rates),
Rt=R0*S/N,
demo_lab=paste0("Birth/death rate: ", demo_rate),
R0_lab=paste0("R0: ", round(R0, 2)),
I_star_lab=paste0("Prevalence at t=500: ", round(100*I[time==500]/N[time==500], 1)))
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
output_all <- c(output_all, list(output_long))
}
output_all <- bind_rows(output_all)
plot_trace(output_all) + facet_wrap(~demo_lab+R0_lab+I_star_lab)
parameters <- list(beta = 0.5, #effective contact rate
gamma = 0, #recovery rate (1/duration infection)
birth = 0.02, #birth rate (per capita)
death = 0.02 #all-cause mortality rate
)
output <- ode(y = state, times = times, func = OpenSIR, parms = parameters)
output <- as.data.frame(output) %>% mutate(N=S+I+R)
output_long <- pivot_longer(output, cols=c("S","I","R"), names_to="state", values_to="size")
plot_trace(output_long)
knitr::opts_chunk$set(echo = TRUE)
library(deSolve)
library(tidyverse)
library(cowplot)
parameters <- list(contact_matrix=matrix(data=c(29, 1, 5, 5)*0.1,
nrow=2, ncol=2, byrow=T),
gamma = 0.3 #recovery rate (1/duration infection)
)
state <- c(S_High = 24999, #high (h) and low (l) risk groups
S_Low = 75000,
I_High = 1,
I_Low = 0,
R_High = 0,
R_Low = 0
)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
parameters <- list(contact_matrix=matrix(data=c(29, 1, 5, 5)*0.1,
nrow=2, ncol=2, byrow=T),
gamma = 0.3 #recovery rate (1/duration infection)
)
state <- c(S_High = 24999, #high (h) and low (l) risk groups
S_Low = 75000,
I_High = 1,
I_Low = 0,
R_High = 0,
R_Low = 0
)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
print(parameters)
parameters <- list(contact_matrix=matrix(data=c(29, 1, 5, 5)*0.1,
nrow=2, ncol=2, byrow=T),
gamma = 0.3 #recovery rate (1/duration infection)
)
state <- c(S_High = 24999, #high (h) and low (l) risk groups
S_Low = 75000,
I_High = 1,
I_Low = 0,
R_High = 0,
R_Low = 0
)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
print(parameters)
print(state)
parameters <- list(contact_matrix=matrix(data=c(29, 1, 1, 5)*0.1,
nrow=2, ncol=2, byrow=T),
gamma = 0.3 #recovery rate (1/duration infection)
)
state <- c(S_High = 24999, #high (h) and low (l) risk groups
S_Low = 75000,
I_High = 1,
I_Low = 0,
R_High = 0,
R_Low = 0
)
T_end <- 500 #run model for 500 time steps (e.g. months)
times <- seq(0, T_end, by = 1) #runs the model for 500 time steps (e.g. months), and computes output at each time step
print(parameters)
print(state)
MixingSIR<-function(t, state, parameters) {
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
with(parameters, {
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/sum(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/sum(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
MixingSIR<-function(t, state, parameters) {
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
with(parameters, {
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/sum(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/sum(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
#demonstrate matrix multiplication here
state_mat <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state_mat) <- c("S", "I", "R")
rownames(state_mat) <- c("h", "l")
print(state_mat)
state_mat[, "S"]*state_mat[,"I"]%*%contact_matrix/sum(state_mat)
MixingSIR<-function(t, state, parameters) {
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
with(parameters, {
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/sum(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/sum(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
#demonstrate matrix multiplication here
state_mat <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state_mat) <- c("S", "I", "R")
rownames(state_mat) <- c("h", "l")
print(state_mat)
state_mat[, "S"]*state_mat[,"I"]%*%parameters$contact_matrix/sum(state_mat)
MixingSIR<-function(t, state, parameters) {
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
with(parameters, {
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/sum(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/sum(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
#demonstrate matrix multiplication here
state_mat <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state_mat) <- c("S", "I", "R")
rownames(state_mat) <- c("h", "l")
print(state_mat)
state_mat[,"I"]%*%parameters$contact_matrix/sum(state_mat)
MixingSIR<-function(t, state, parameters) {
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
with(parameters, {
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/sum(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/sum(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
#demonstrate matrix multiplication here
state_mat <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state_mat) <- c("S", "I", "R")
rownames(state_mat) <- c("h", "l")
print(state_mat)
state_mat[,"I"]%*%parameters$contact_matrix
MixingSIR<-function(t, state, parameters) {
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
with(parameters, {
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/sum(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/sum(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
#demonstrate matrix multiplication here
state_mat <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state_mat) <- c("S", "I", "R")
rownames(state_mat) <- c("h", "l")
print(state_mat)
#rates at which high- and low-risk susceptibles acquire infection
state_mat[,"I"]%*%parameters$contact_matrix/sum(state_mat)
state_mat[,"I"]
state_mat[2,"I"]
state_mat[2,"I"] <- 1
state_mat[,"I"]%*%parameters$contact_matrix/sum(state_mat)
MixingSIR<-function(t, state, parameters) {
state <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state) <- c("S", "I", "R")
rownames(state) <- c("h", "l")
with(parameters, {
dS <- -1*state[, "S"]*state[,"I"]%*%contact_matrix/sum(state)
dI <- state[, "S"]*state[,"I"]%*%contact_matrix/sum(state) -
gamma*state[,"I"]
dR <- gamma*state[,"I"]
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
#demonstrate matrix multiplication here
state_mat <- matrix(data=state, nrow=ncol(parameters$contact_matrix))
colnames(state_mat) <- c("S", "I", "R")
rownames(state_mat) <- c("h", "l")
print(state_mat)
#rates at which high- and low-risk susceptibles acquire infection
state_mat[,"I"]%*%parameters$contact_matrix/sum(state_mat)
output <- ode(y = state, times = times, func = MixingSIR, parms = parameters)
output <- as.data.frame(output)
output_long <- pivot_longer(output, cols=2:ncol(output), names_to=c("state", "risk"), names_sep="_", values_to="size")
output_long <- output_long %>% group_by(time, risk) %>% mutate(N=sum(size))
plot_trace_risk <-function(out) {
fig <- ggplot(out, aes(x=time, y=size/N, color=state, linetype=risk)) +
geom_line(linewidth=1.25) +
labs(x='Time', y='Compartment proportions', color='', linetype='Risk') +
theme_bw() + theme(panel.grid=element_blank())
return(fig)
}
plot_trace_risk(output_long %>% filter(time<100))
#this is just the same as in SIR_basic
parameters_basic <- c(beta = 0.5, #effective contact rate (aka transmission rate)
gamma = 0.3 #recovery rate (1/duration of infection)
)
state_basic <- c(S = 99999, #population of 100,000, 1 person starts of infected
I = 1,
R = 0
)
BasicSIR<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
N = S + I + R #define N (total population size)
#SIR model equations from lecture - rates of change in and out of each compartment
dS <- -beta*S*I/N
dI <- beta*S*I/N - gamma*I
dR <- gamma*I
#return the rates of change as a list
list(c(dS, dI, dR))
})
}
plot_trace <-function(out) {
fig <- ggplot(out, aes(x=time, y=size/N, color=state)) +
geom_line(linewidth=1.25) +
labs(x='Time', y='Compartment size', color='') +
theme_bw() + theme(panel.grid=element_blank())
return(fig)
}
output_basic <- ode(y = state_basic, times = times, func = BasicSIR, parms = parameters_basic)
output_basic <- as.data.frame(output_basic) %>% mutate(N=S+I+R)
output_long_basic <- pivot_longer(output_basic, cols=c("S","I","R"), names_to="state", values_to="size")
fig1 <- plot_trace(output_long_basic %>% filter(time<100))
#sum across risk groups to produce an equivalent trace plot
output_long_sum <- output_long %>% group_by(time, state) %>%
summarise(size=sum(size), N=sum(N))
fig2 <- plot_trace(output_long_sum %>% filter(time<100))
#compare trace plots
plot_grid(fig1 + ggtitle("Homogeneous Mixing"),
fig2 + ggtitle("Heterogeneous Mixing"),
align="hv")
R_matrix <- parameters$contact_matrix*(rowSums(matrix(data=state, nrow=ncol(parameters$contact_matrix)))/sum(state))/
(parameters$gamma)
R0 <- max(eigen(R_matrix)$values) #this is the R0 of the stratified version
R0_basic <- parameters_basic[["beta"]]/parameters_basic[["gamma"]]
print(paste0("R0 basic: ", round(R0_basic, 2), "; R0 stratified: ", round(R0, 2)))
contact_matrices <- list(matrix(data=c(35, 0, 0, 5)*0.1,
nrow=2, ncol=2, byrow=T),
matrix(data=c(29, 1, 1, 5)*0.1,
nrow=2, ncol=2, byrow=T),
matrix(data=c(17, 3, 3, 5)*0.1,
nrow=2, ncol=2, byrow=T),
matrix(data=c(5,5,5,5)*0.1,
nrow=2, ncol=2, byrow=T)
)
names(contact_matrices) <- c("No mixing", "More assortative mixing",
"Less assortative mixing", "Homogeneous mixing")
output_all <- list()
for(i in names(contact_matrices)) {
parameters[["contact_matrix"]] <- contact_matrices[[i]]
output <- ode(y = state, times = times, func = MixingSIR, parms = parameters)
output_long <- pivot_longer(as.data.frame(output), cols=2:ncol(output),
names_to=c("state", "risk"), names_sep="_", values_to="size")
output_long <- output_long %>% group_by(time, risk) %>% mutate(N=sum(size))
output_all <- c(output_all, list(output_long %>% mutate(contact_pattern=i)))
}
#results stratified by risk group
output_all <- bind_rows(output_all) %>%
mutate(contact_pattern=factor(contact_pattern, levels=names(contact_matrices)))
plot_trace_risk(output_all %>% filter(time<=100)) + facet_wrap(~contact_pattern)
#total population results
output_all_sum <- output_all %>% group_by(time, state, contact_pattern) %>%
summarise(size=sum(size), N=sum(N))
plot_trace(output_all_sum %>% filter(time<100)) + facet_wrap(~contact_pattern)
plot_trace(output_all_sum %>% filter(time<200 & contact_pattern=="Homogeneous mixing"))
plot_trace(output_long_basic %>% filter(time<200))
